@model List<OutilRentabilite.Models.AnalyseProduitViewModel>
@{
    ViewData["Title"] = "Analyse par produit individuel";
}

<h2>Analyse par produit</h2>

<form method="get" asp-action="Analyse" class="d-flex align-items-end gap-3 mb-4">
    <div>
        <label for="dateDebut" class="form-label">Date de début</label>
        <input type="date" class="form-control" id="dateDebut" name="dateDebut" value="@ViewBag.DateDebut" />
    </div>
    <div>
        <label for="dateFin" class="form-label">Date de fin</label>
        <input type="date" class="form-control" id="dateFin" name="dateFin" value="@ViewBag.DateFin" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Filtrer</button>
        <a href="@Url.Action("Analyse")" class="btn btn-outline-secondary">Réinitialiser</a>
    </div>
</form>

@if (!Model.Any())
{
    <div class="alert alert-warning mt-3">Aucune simulation disponible pour la période sélectionnée.</div>
}
else
{
    <div class="mb-3">
        @Html.Raw(ViewBag.MeilleurProduitMessage)
    </div>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Produit</th>
                <th>Type</th>
                <th>Revenu moyen (Ar)</th>
                <th>Bénéfice moyen (Ar)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Nom</td>
                    <td>@item.TypeProduit</td>
                    <td>@item.RevenuMoyen.ToString("N0")</td>
                    <td>@item.BeneficeMoyen.ToString("N0")</td>
                </tr>
            }
        </tbody>
    </table>

    <canvas id="analyseChart" width="800" height="400"></canvas>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const labels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(p => p.Nom)));
        const revenus = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(p => p.RevenuMoyen)));
        const benefices = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(p => p.BeneficeMoyen)));

        const ctx = document.getElementById('analyseChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Revenu moyen',
                        data: revenus,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'Bénéfice moyen',
                        data: benefices,
                        backgroundColor: 'rgba(153, 102, 255, 0.6)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Analyse des produits financiers'
                    }
                }
            }
        });
    </script>
}
